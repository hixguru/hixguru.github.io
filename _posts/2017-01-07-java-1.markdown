---
layout: "post"
title: "[Java] 값 복사, 참조 값 복사"
date: "2017-01-07 11:45"
---

2017년 새해부터는 기술 블로그를 운영해보자라는 다짐과 함께 자바에 대한 기초를 다시 한번 잡아보려고 한다.
~~주저리는 그만하고~~ 오늘은 값 복사와 참조 값 복사에 대해서 정리해보려고 한다.

### 값 복사
> 값복사란? 두 개의 메모리가 존재하고 한쪽의 메모리에 들어 있는 값을 다른쪽의 메모리로 그 값만을 복사하는 행위를 말한다. (최영관, 『소설같은 자바』, JABOOK, p148)

책의 정의는 가슴에 와닿지 않은게 우리네의 인생이니 예제를 통해 한번 알아보자.

```java
int a;
a = 5;
int b;
b = a;
```

`int a` : integer라는 기본 데이터 타입(Primitive Data Type) 형태의 4byte 메모리를 생성했다. 우리는 a를 **"변수"**라고 부르며, 이를 좀더 쓸모있는 놈으로 만들기 위해 **"할당"**이라는 것을 해보자(값을 할당하지 않아도 메모리는 생성된다).

`int a = 3` : 자 이로써 우리는 a라는 4byte공간을 갖고 있는 메모리에 정수 3을 **"할당"**했다.

`int b` : 마찬가지로 4byte의 메모리만 생성됐을 뿐, 값은 할당되지 않았다.

`b = a` : 프로그래밍을 모르는 사람이 봐도 눈치 껏 당연히 b는 5아니야? 라고 할 수 있겠지만, 이 때 우리가 부르는 **"값 복사"**가 이루어진다. 첫번째 라인에서 우리가 a가 가리키는 메모리에 할당한 5값이 b가 가리키는 메모리에 복사가 되는 것이다.

> 자바에서는 메소드를 호출할 때 매개변수가 전달되는 방식은 모두 값복사(Call by Balue)가 이루어진다.

어쩌면 이렇게 설명하기 무안할 정도로 간단한 개념이긴 하지만, 값 복사의 개념을 이해해야 참조 값 복사의 개념을 보다 쉽게 이해할 수 있을 것이다.

## 참조 값 복사
자 이제 값 복사에 대해 간단하게 알아봤으니, 이제 참조 값 복사에 대해서 한번 알아보자. 비슷한 맥락이니 전혀 어렵지 않을 것이다. 우리는 자바 프로그래밍을 할 때 기본 데이터 타입(Primitive Data Type)만 사용할 일은 없을 것이다. 원하는 형태의 변수와 메소드를 모아 클래스를 만들 것이다.

일반적인(?) 형태의 클래스를 만들어 보자

    public class Lol {
        public static void main(String... args) {
            Champions vayne = null;
            Champions ezreal = null;

            vayne = new Champions();
            vayne.setVoice("어둠에 빠진 자들을 사냥해볼까");
            vayne.setDamage(56);

            System.out.println("vayne's voice is " + vayne.getVoice());
            System.out.println("vayne's damage is " + vayne.getDamage());

            ezreal = vayne;
            ezreal.setVoice("내 솜씨를 제대로 보여줄 시간이군!");
            ezreal.setDamage(55);

            System.out.println("ezreal's voice is " + ezreal.getVoice());
            System.out.println("ezreal's damage is " + ezreal.getDamage());

            System.out.println("vayne's voice is " + vayne.getVoice());
            System.out.println("vayne's damage is " + vayne.getDamage());
        }
    }

    class Champions {
        private String voice;
        private int damage;

        public void setVoice(String voice) {
            this.voice = voice;
        }

        public void setDamage(int damage) {
            this.damage = damage;
        }

        public String getVoice() {
            return voice;
        }

        public int getDamage() {
            return damage;
        }
    }

`Champions vayne = null` : 참조값을 저장할 수 있는 참조 변수의 메모리(4byte)는 생성되지만 참조변수는 null값을 가진다.

> 참조값: C++에서는 직접 메모리의 주소를 핸들할 수 있지만, Java에서는 객체의 메모리에 생성된 주소와 매핑된 유니크한 숫자값을 갖는다.

`vayne = new Champions();` : new Champions와 함께 객체의 메모리가 생성되고, 참조값이 vayne에게 할당된다. 이제 우리는 vayne이 가지고 있는 참조 값을 이용해(index table에 존재하는 메모리 주소가 갖고 있는 멤버 변수들) 해당 인스턴스를 핸들할 수 있는 것이다.

```java
//vayne의 참조변수를 이용하여 멤버 변수를 핸들한다.
vayne.setVoice("어둠에 빠진 자들을 사냥해볼까");
vayne.setDamage(56);
```

여기까지 이해가 됐다면, ezreal의 인스턴스가 생성되는 것까지 무난히 왔을 것이다.

`ezreal = vayne;` : 우리가 그토록 고대하던 참조 값 복사가 이루어 지기 전에 먼저 결과 값 부터 함께 보도록 하자.


![vayne과 ezreal의 값이 공통적으로 출력되는 것을 볼 수 있다.](../../../assets/images/example1.png)


눈치가 있는 사람들은 위의 결과에 그리 놀라지 않을 것이다.
위에 언급했던 것처럼 객체를 인스턴스화 시켰을 경우 해당 참조변수는 참조 값을 갖게 된다.
`ezreal = vayne;` 그와 동시에 `ezreal`은 참조 값을 갖고 있지 않았지만, `vayne`이 갖고 있는 동일한 참조 값을 갖게 되면서, index table에 있는 동일한 메모리를 바라보게 되는 것이다. 그렇기 때문에 그 이후에 일어나는 `setVoice`와 `setDamage`의 행동들은 `vayne`이 이전에 핸들 했던 동일한 메모리 주소가 갖고 있는 변수들을 바꾸기 때문에 `vayne`과 `ezreal`은 결국 같은 값을 바라보게 되는 것이다.

이전에 뜬구름같이 알고 있던 개념들을 새해부터 다시금 조금씩 정리하다 보니 너무 기초적인 부분을 놓치고 있지 않았던가 라는 생각이 들었다. 조금씩 조금씩 필요한 부분을 정리하면서 자바의 기초를 탄탄히 세워볼 생각이다.

혹시라도 위의 내용중 잘못된 내용이 전달 됐다면 언제든지 피드백 부탁드립니다. 첫 포스팅이니만큼 주저리 주저리 두서없이 썼는데, 양해 부탁드리며 앞으로 잘 부탁드립니다 : D
